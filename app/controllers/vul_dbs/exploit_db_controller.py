from csv import reader
from os import system
from pytz import UTC
from requests import get
from datetime import datetime
from pymongo import UpdateOne
from app.apis import get_last_commit_date_gitlab
from app.services import (
    read_env_variables,
    update_env_variables_by_exploit_db,
    bulk_write_actions
)


async def modulo_5000(index: int) -> bool:
    if index - 5000 == 0:
        return True
    elif index - 5000 < 0:
        return False
    return await modulo_5000(index - 5000)


async def exploit_db_update() -> None:
    env_variables = await read_env_variables()
    last_update = env_variables['exploit_db_last_update'].replace(tzinfo=UTC)
    last_commit_date = await get_last_commit_date_gitlab('exploit-database', 'exploitdb')
    if last_update < last_commit_date:
        now = datetime.now()
        now_format = datetime.now().isoformat()
        await update_exploits(last_update, now_format)
        await update_env_variables_by_exploit_db(env_variables['_id'], now)
        system('rm -rf exploitdb')

async def update_exploits() -> None:
    exploits_actions: list[UpdateOne] = []
    cves_actions: list[UpdateOne] = []
    url = "https://gitlab.com/exploit-database/exploitdb/-/raw/main/files_exploits.csv?ref_type=heads&inline=false"
    with get(url, stream=True) as response:
        for index, row in enumerate(reader([l.decode('utf-8') for l in response.iter_lines()], delimiter=',')):
            if index == 0:
                attributes = row
            elif await modulo_5000(index):
                await bulk_write_actions(exploits_actions, 'exploits', ordered=False)
                await bulk_write_actions(cves_actions, 'cves', ordered=False)
                exploits_actions.clear()
                cves_actions.clear()
            else:
                exploit = dict(zip(attributes, row))
                cve_ids = [code for code in exploit['codes'].split(';') if 'CVE' in code]
                exploits_actions.append(UpdateOne({'id': exploit['id']}, {'$addToSet': {'cves': {'$each': cve_ids}}, '$setOnInsert': exploit}, upsert=True))
                for cve_id in cve_ids:
                    cves_actions.append(UpdateOne({'id': cve_id}, {'$addToSet': {'exploits': exploit['id']}}))
